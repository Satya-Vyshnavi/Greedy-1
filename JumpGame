BFS: T.c --> O(n) , S.c --> O(n)
class Solution {
    public boolean canJump(int[] nums) {
        if(nums.length == 1){
            return true;
        }
        Queue<Integer> q = new LinkedList<>();
        HashSet<Integer> visited = new HashSet<>();
        q.add(0);
        while(!q.isEmpty()){          
          int curr = q.poll();
          for(int i =1; i<=nums[curr]; i++){
            if(curr+i == nums.length-1){
                return true;
            }
            if(!visited.contains(curr+i)){
               q.add(curr+i); 
            }
            visited.add(curr+i);
          }
        }
        return false;
    }
}
***************************************************************************************

Greedy Solution  T.c --> O(n), S.c --> O(1)

class Solution {
    public boolean canJump(int[] nums) {
         if(nums.length == 1) return true;
        int n = nums.length;
        int target = n - 1;
        for(int i = n-2; i >= 0; i--){
            if(i + nums[i] >= target){
                target = i;
            }
        }
        return target == 0;
    }
}
***************************************************************************************

